{% set vm = item.value -%}
<!--
                    _ _     _
    /\             (_) |   | |
   /  \   _ __  ___ _| |__ | | ___
  / /\ \ | '_ \/ __| | '_ \| |/ _ \
 / ____ \| | | \__ \ | |_) | |  __/
/_/    \_\_| |_|___/_|_.__/|_|\___|

This file is managed by Ansible. Do not edit directly.

To edit:
  1. Edit the template at roles/hypervisor/templates/workstation.xsl.j2
  2. Run `./run.sh setup_hypervisor.yml` to regenerate this file
  3. Run `./run.sh generate_tfvars.yml` to regenerate the Terraform variables
  4. Run `terraform apply` to apply the changes
-->
<xsl:stylesheet version="1.0"
      xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
      xmlns:qemu="http://libvirt.org/schemas/domain/qemu/1.0">

  <xsl:output omit-xml-declaration="yes" method="xml" indent="yes" />
  <xsl:strip-space elements="*" />

  <!-- Root level modifications -->
  <xsl:template match="/domain/vcpu" />
  <xsl:template match="/domain/clock" />
  <xsl:template match="/*">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()" />

{% if vm.is_windows -%}
      <!-- use local time for Windows -->
      <clock offset="localtime">
{% else -%}
      <clock offset="utc">
{% endif %}
        <timer name="rtc" tickpolicy="catchup" />
        <timer name="pit" tickpolicy="delay" />
        <timer name="hpet" present="no" />
{% if vm.is_windows -%}
        <timer name="hypervclock" present="yes" />
{% endif %}
      </clock>

      <pm>
        <suspend-to-mem enabled="no" />
        <suspend-to-disk enabled="no" />
      </pm>

      <!-- we define this here to centralize CPU config -->
      <vcpu placement="static">{{ vm.cpus }}</vcpu>

      <!-- CPU pinning -->
      <cputune>
{% set target_cores = (vm.cpus / 2) | int %}
{% set cpu_offset_0 = (ansible_processor_vcpus / ansible_processor_threads_per_core) | int - target_cores %}
{% set cpu_offset_1 = ansible_processor_vcpus - target_cores %}
{% for i in range(0, target_cores) %}
        <vcpupin vcpu="{{ (i * 2) }}" cpuset="{{ cpu_offset_0 + i }}" />
        <vcpupin vcpu="{{ (i * 2) + 1 }}" cpuset="{{ cpu_offset_1 + i }}" />
{% endfor %}
        <emulatorpin cpuset="{{ cpu_offset_0 }},{{ cpu_offset_1 }}" />
      </cputune>
    </xsl:copy>
  </xsl:template>

  <!-- assign correct CPU topology -->
  <xsl:template match="/domain/cpu">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()" />

      <topology sockets="1" cores="{{ target_cores }}" threads="2" />
    </xsl:copy>
  </xsl:template>

  <!-- see: https://github.com/dmacvicar/terraform-provider-libvirt/issues/885 -->
  <xsl:template match="/domain/devices/disk[@device='cdrom']/target/@bus">
    <xsl:attribute name="bus">sata</xsl:attribute>
  </xsl:template>

{% if vm.is_windows %}
  <!-- enable secure boot -->
  <xsl:template match="/domain/os/loader/@secure">
    <xsl:attribute name="secure">yes</xsl:attribute>
  </xsl:template>

  <xsl:template match="/domain/features">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()" />

      <hyperv mode="custom">
        <relaxed state="on" />
        <vapic state="on" />
        <spinlocks state="on" retries="8191" />
        <vpindex state="on" />
        <synic state="on" />
        <reset state="on" />
      </hyperv>

      <!-- required for secure boot -->
      <smm state="on" />
    </xsl:copy>
  </xsl:template>
{% endif %}

  <!-- Remove devices -->
  <xsl:template match="/domain/devices/video" />
  <xsl:template match="/domain/devices/audio" />
  <xsl:template match="/domain/devices/graphics" />
  <xsl:template match="/domain/devices/input" />
  <xsl:template match="/domain/devices/controller[@type='usb']" />

  <!-- Add devices -->
  <xsl:template match="/domain/devices">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()" />
{% if vm.is_windows -%}
      <!-- emulate TPM 2.0 for Windows 11 -->
      <tpm model="tpm-tis">
        <backend type="emulator" version="2.0" />
      </tpm>
{% endif %}

      <!-- be explicit about USB controllers -->
      <controller type="usb" model="nec-xhci" ports="15" /> <!-- usb.0 -->

{% for pci in vm.pci_devices %}
  {% set pci_type = managed_vm_pci_devices[pci] %}
  {% if 'description' in pci_type and pci_type.description %}
      <!-- {{ pci_type.description }} -->
  {% endif %}
  {% for device in pci_type.devices %}
    {% if 'managed' in device and device.managed %}
      <hostdev mode="subsystem" type="pci" managed="yes">
    {% else %}
      <hostdev mode="subsystem" type="pci">
    {% endif %}
        <source>
          <address domain="0x0000" bus="{{ device.bus }}" slot="{{ device.slot }}" function="{{ device.function }}" />
        </source>
      </hostdev>
  {% endfor %}
{% endfor %}
    </xsl:copy>
  </xsl:template>

  <!-- Copy the rest of the domain definition verbatim -->
  <xsl:template match="@*|node()">
    <xsl:copy>
      <xsl:apply-templates select="@*|node()" />
    </xsl:copy>
  </xsl:template>
</xsl:stylesheet>
