- name: Create directory for ROM files
  file:
    path: '{{ hypervisor_roms_dir }}'
    state: directory
    mode: '0755'

- name: Create list of ROM files to copy
  set_fact:
    managed_vm_pci_devices_roms: "{{ managed_vm_pci_devices_roms | default([]) + [item.rom] }}"
  loop: "{{ managed_vm_pci_devices | json_query('*.devices[]') }}"
  when: item.rom is defined

- set_fact:
    managed_vm_pci_devices_roms: "{{ managed_vm_pci_devices_roms | unique }}"

- name: Copy ROM files to hypervisor
  copy:
    src: 'vbios/{{ item }}'
    dest: '{{ hypervisor_roms_dir }}/'
    mode: '0644'
  loop: "{{ managed_vm_pci_devices_roms }}"

- name: Check for orphaned ROM files
  find:
    paths: '{{ hypervisor_roms_dir }}'
    patterns: '*.rom'
  register: rom_files

- name: Remove orphaned ROM files
  file:
    path: '{{ item.path }}'
    state: absent
  loop: "{{ rom_files.files }}"
  when: item.path | basename not in managed_vm_pci_devices_roms

- name: Ensure managed-vms.local.json exists
  block:
    - name: Check if managed-vms.local.json exists
      stat:
        path: '{{ hypervisor_managed_vms_local_file }}'
      register: managed_vms_local_file
    - name: Create managed-vms.local.json
      copy:
        content: '{}'
        dest: '{{ hypervisor_managed_vms_local_file }}'
        owner: root
        group: '{{ ansible_user }}'
        mode: '0664'
      when: not managed_vms_local_file.stat.exists
    - name: Ensure permissions on managed-vms.local.json
      file:
        path: '{{ hypervisor_managed_vms_local_file }}'
        owner: root
        group: '{{ ansible_user }}'
        mode: '0664'
      when: managed_vms_local_file.stat.exists

- name: Read managed-vms.local.json
  block:
    - slurp:
        src: '{{ hypervisor_managed_vms_local_file }}'
      register: managed_vms_local_file_slurped
    - set_fact:
        managed_vms_local: "{{ managed_vms_local_file_slurped.content | b64decode | from_json }}"
    - set_fact:
        managed_vms: "{{ managed_vms | default({}) | combine(managed_vms_local, recursive=True) }}"

- name: Generate managed VM configs
  template:
    src: '{{ item.value.type }}.xsl.j2'
    dest: 'terraform/xslt/generated/{{ item.key }}.xsl'
  loop: '{{ managed_vms | dict2items }}'
  become: false
  delegate_to: localhost
